package dev.langchain4j.model.output

import dev.langchain4j.internal.Utils
import java.util.Objects

/**
 * Represents the response from various types of models, including language, chat, embedding, and moderation models.
 * This class encapsulates the generated content, token usage statistics, finish reason, and response metadata.
 *
 * @param <T> The type of content generated by the model.
</T> */
class Response<T> @JvmOverloads constructor(
    content: T,
    private val tokenUsage: TokenUsage? = null,
    private val finishReason: FinishReason? = null,
    metadata: Map<String?, Any?>? = java.util.Map.of()
) {
    private val content: T = content!!
    private val metadata: Map<String?, Any?> = Utils.copy(metadata)

    /**
     * Create a new Response.
     *
     * @param content      the content to wrap.
     * @param tokenUsage   the token usage statistics, or `null`.
     * @param finishReason the finish reason, or `null`.
     * @param metadata     the response metadata, or `null`.
     */
    /**
     * Create a new Response.
     *
     *
     * Will contain `null` `TokenUsage` and `FinishReason`
     *
     * @param content the content to wrap.
     */

    /**
     * Get the content.
     *
     * @return the content.
     */
    fun content(): T {
        return content
    }

    /**
     * Get the token usage statistics.
     *
     * @return the token usage statistics, or `null`.
     */
    fun tokenUsage(): TokenUsage? {
        return tokenUsage
    }

    /**
     * Get the finish reason.
     *
     * @return the finish reason, or `null`.
     */
    fun finishReason(): FinishReason? {
        return finishReason
    }

    /**
     * Get the response metadata.
     *
     * @return the response metadata.
     */
    fun metadata(): Map<String?, Any?> {
        return metadata
    }

    override fun equals(o: Any?): Boolean {
        if (this === o) return true
        if (o == null || javaClass != o.javaClass) return false
        val that = o as Response<*>
        return this.content == that.content
                && this.tokenUsage == that.tokenUsage
                && this.finishReason == that.finishReason
                && this.metadata == that.metadata
    }

    override fun hashCode(): Int {
        return Objects.hash(content, tokenUsage, finishReason, metadata)
    }

    override fun toString(): String {
        return "Response {" +
                " content = " + content +
                ", tokenUsage = " + tokenUsage +
                ", finishReason = " + finishReason +
                ", metadata = " + metadata +
                " }"
    }

    companion object {
        /**
         * Create a new Response.
         *
         * @param content the content to wrap.
         * @param <T>     the type of content.
         * @return the new Response.
        </T> */
        fun <T> from(content: T): Response<T> {
            return Response(content)
        }

        /**
         * Create a new Response.
         *
         * @param content    the content to wrap.
         * @param tokenUsage the token usage statistics.
         * @param <T>        the type of content.
         * @return the new Response.
        </T> */
        fun <T> from(content: T, tokenUsage: TokenUsage?): Response<T> {
            return Response(content, tokenUsage, null)
        }

        /**
         * Create a new Response.
         *
         * @param content      the content to wrap.
         * @param tokenUsage   the token usage statistics.
         * @param finishReason the finish reason.
         * @param <T>          the type of content.
         * @return the new Response.
        </T> */
        fun <T> from(content: T, tokenUsage: TokenUsage?, finishReason: FinishReason?): Response<T> {
            return Response(content, tokenUsage, finishReason)
        }

        /**
         * Create a new Response.
         *
         * @param content      the content to wrap.
         * @param tokenUsage   the token usage statistics.
         * @param finishReason the finish reason.
         * @param metadata     the response metadata.
         * @param <T>          the type of content.
         * @return the new Response.
        </T> */
        fun <T> from(
            content: T,
            tokenUsage: TokenUsage?,
            finishReason: FinishReason?,
            metadata: Map<String?, Any?>?
        ): Response<T> {
            return Response(content, tokenUsage, finishReason, metadata)
        }
    }
}
